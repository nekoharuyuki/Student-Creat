<HTML>
<HEAD>
<meta http-equiv="Content-Type" content="text/html; charset=shift_jis">
<meta http-equiv="Content-Language" content="ja">
<TITLE>平成15年度秋期試験　問題(問3〜問5)</TITLE>
</HEAD>
<BODY BGCOLOR="#FFFFFF" topmargin="0" leftmargin="0">
<blockquote>
  <hr>
  <H3 align="center">平成15年度秋期試験　問題(問3〜問5)</H3>
<HR WIDTH=100%>
<A NAME="30">　<BR>
<b>
問3</b></a><b>　</b>プログラムの実行時間に関する次の記述を読んで，設問に答えよ。<br>
<br>
処理するデータ量によって，プログラムの実行時間がどのように変化するかを考えるときに，オーダ（という概念）を用いる。例えば，n個のデータを処理する最大実行時間がCn<SUP>2</SUP>（Cは定数）で抑えられるとき，実行時間のオーダがn<SUP>2</SUP>であるという。<br>
<br>
        <p><img border="0" src="image/P_03_01.gif"></p>
        <p><br>
<HR WIDTH=100%>
<br>
</a><A NAME="31">　<BR>
<b>
設問</b></a><b>　</b>次の記述中の［　　　　］に入れる適切な答えを，解答群の中から選べ。なお，解答は重複して選んでもよい。<br>
<br>
プログラムの各行の実行時間が一定であり，その時間をkと考える（行番号5，12，14についてもkだけの時間を要す）。このとき，αの部分の実行時間は［　　a　　］となるので，オーダは［　　b　　］となる。<br>
β部分もα部分と同様に計算し，両者の実行時間を足してからプログラム全体のオーダを求めることができる。しかし，次の二つの規則を用いることで，より簡単にオーダを求めることが可能となる。
<br>
        <table border="0" cellpadding="15" cellspacing="0">
          <tr>
            <td valign="top" width="60">規則1:</td>
            <td>順次処理で構成されている部分は，実行時間の最も長い行のオーダが，全体の実行時間のオーダとなる。</td>
          </tr>
          <tr>
            <td valign="top">規則2:</td>
            <td>繰り返し処理で構成されている部分は，繰り返される部分のオーダに繰返し数を掛けた値のオーダ（定数は無視する）が，全体の実行時間のオーダになる。<br>
例えば，繰り返される部分のオーダがn<SUP>2</SUP>で，繰返し数が100nならば，繰返し処理全体のオーダは，n<SUP>3</SUP>である。</td>
          </tr>
        </table>
行番号10と11の実行時間のオーダは，規則1から1となる。行番号9〜12は行番号10と11をn回繰り返すので，ここのオーダは規則2から［　　c　　］となる。同様に考えていくと，β部分の実行時間のオーダは［　　d　　］となる。<br>
したがって，プログラム全体の実行時間のオーダは［　　e　　］となる。<br>
<br>
        <p><img border="0" src="image/P_02-3-2.gif"></p>
        <p><br>
aに関する解答群<br>
ア　2kn+k　　　 イ　2kn+2k　　　ウ　3kn+k<br>
エ　3kn+2k　　　オ　4kn+k　　　 カ　4kn+2k<br>
<br>
b〜eに関する解答群<br>
ア　log<SUB>2</SUB>n　　　イ　n　　　ウ　nlog<SUB>2</SUB>n<br>
エ　n<SUP>2</SUP>　　　　 オ　n<SUP>3</SUP>
<br>
<A NAME="31">
<HR WIDTH=100%>
</a>
<A HREF="15F_P_A2.HTM#31">設問の正解例と解説へ</A>
<HR WIDTH=100%>
<p><A HREF="index.htm">メニューへ戻る</A>　</p>
<HR WIDTH=100%>
<A NAME="40">　<BR>
<b>
問4</b></a>　次のプログラムの説明及びプログラムを読んで，設問に答えよ。<br><br>
〔プログラムの説明〕<br>
出発地から目的地までの最短経路を求める副プログラムである。<br>
<BR>
        <table border="0" cellpadding="3" cellspacing="0">
          <tr>
            <td valign="top">（1）</td>
            <td>副プログラムSPは，N個（N＞1）の地点で構成される図1のような有向グラフで表される経路図において，地点1（出発地）から地点N（目的地）までの最短経路を求めて，出力するプログラムである。<BR>
なお，図1において，円は地点を，矢印の向きは進行方向を，矢印に付けた数字は地点間の距離を表す。</td>
          </tr>
          <tr>
            <td valign="top">（2）</td>
            <td>この副プログラムでは，次の配列を用いる。要素番号i，jの値は1，2，･･･，Nであり，各地点と対応している。<BR>
C[i, j]：地点iから地点jまでの距離を表す配列である。地点iから地点jまでの直接の経路がない場合，地点iと地点jが等しい場合，及び進行方向と逆の場合は∞が格納されている。例えば図1では，C[1, 2] = 30，C[1, 3] = ∞，C[2, 1] = ∞，C[2, 2] = ∞である。<BR>
D[i]：地点1から地点iまでの最短経路を格納するための配列である。初期設定で地点1から地点iまでの距離C[1, i]を設定する。例えば図1の場合の初期設定では，D[2] = C[1, 2] = 30，D[3] =C[1, 3] = ∞，D[4] = C[1, 4] = 20，D[5] = C[1, 5] = 120が設定される。<BR>
P[i]：最短経路を求める過程で，処理済みとなった地点を識別するための配列である。初期設定ではP[1]だけに1を設定し，他のすべの要素には0を設定する。最短経路を求めた後はすべての要素が1となる。<BR>
S[i]：地点1から地点iまでの最短経路を求める過程で，地点iの直前の地点を格納するための配列である。初期設定ではすべての要素に1を設定する。例えば図1の場合，最短経路を求めた後はS[2] = 1，S[3] = 4，S[4] = 1，S[5] = 3となり，地点5の直前は地点3，地点3の直前は地点4，地点4の直前は地点1とわかる。すなわち，地点1から地点5までの最短経路は，地点1 → 地点4 → 地点3 → 地点5となる。<BR>
W[i]：S[i]を用いて最短距離を出力する際に使用する作業用の配列である。<BR>
</td>
          </tr>
          <tr>
            <td valign="top">（3）</td>
            <td>最短経路を求める手順は，次のとおりである。<BR>
<img border="0" src="image/01_maru.GIF">　処理していないすべての地点（P[i] = 0）のうちで，D[T]が最小である地点Tを選ぶ。<BR>
<img border="0" src="image/02_maru.GIF">　地点Tを処理済（p[T] = 1）とする。<BR>
<img border="0" src="image/03_maru.GIF">　処理していないすべての地点（P[i] = 0）に対して，D[T] + C[T, i]の値がD[i]の値より小さければ，D[T] + C[T, i]の値でD[i]を置き換える。<BR>
<img border="0" src="image/04_maru.GIF">　<img border="0" src="image/03_maru.GIF">でD[i]を置き換えた場合，S[i]にTを代入する。<BR>
<img border="0" src="image/05_maru.GIF">　処理<img border="0" src="image/01_maru.GIF">〜<img border="0" src="image/04_maru.GIF">を，全地点が処理済になるまで繰り返す。<BR>
</td>
          </tr>
          <tr>
            <td valign="top">（4）</td>
            <td>最短経路を求めた後，配列Sを用いて最短経路を出力する。出力には，数値Xを出力した後に改行する副プログラムoutput(x)を利用する。</td>
          </tr>
          <tr>
            <td valign="top">（5）</td>
            <td>図1の経路図に対する出力結果を図2に，また最短経路を求める過程での配列と変数Tの値の変化を表1に示す。</td>
          </tr>
          <tr>
            <td valign="top">（6）</td>
            <td>出発地から目的地までの経路は，必ず存在するものとする。<BR><BR>
        <p><img border="0" src="image/P_04_01.gif"></p>
        <p>
図1　経路図の例（N=5の場合）<BR>
<BR><BR>
        <p><img border="0" src="image/P_04_02.gif"></p>
        <p>

図2　図1の経路図に対する出力結果<BR>
</td>
          </tr>
        </table>
<BR>
        <p><img border="0" src="image/P_04-0-3.gif"></p>
        <p>
<BR>
（7）副プログラムSPの引数は，表2のとおりである。<BR>
        <p><img border="0" src="image/P_04_04.gif"></p>
        <p>

        <p><img border="0" src="image/P_04-0-5.gif"></p>
        <p>
        <p><img border="0" src="image/P_04-0-6.gif"></p>
        <p>
        <p><img border="0" src="image/P_04-0-7.gif"></p>
        <p>

        <br>
<HR WIDTH=100%>
<A NAME="41">
<b>　<BR>
設問</b></a><b>　</b>プログラム中の［　　　　］に入れる正しい答えを，解答群の中から選べ。
<BR>
<BR>
a〜cに関する解答群<BR>
ア　P[Y] ← 0　　　イ　P[Y] ← 1　　　ウ　S[T] ← Y　　　　エ　S[Y] ← T<BR>
オ　Y ← S[X]　　　カ　Y ← S[Y]　　　キ　Z ← D[Y]<BR>
<BR>
<BR>
dに関する解答群<BR>
<BR>
ア　X ＞ 0　　　イ　X ≧ 0　　　ウ　W[X] ＞ 0　　　エ　W[X] ≧ 0<BR>
<BR>
<HR WIDTH=100%>  
<A HREF="15F_P_A2.HTM#41">設問の正解例と解説へ</A>  
<HR WIDTH=100%>  
　<BR> 
  　<BR>
<b><a name="50">問5</a>　</b>プログラム設計に関する次の記述を読んで，設問1，2に答えよ。<br>
<br>
各店舗が毎日の営業時間終了後に本社へ送ってくる商品の在庫情報と，その店舗における過去の販売実績の情報から，商品の補充のための配送情報を作成するプログラムを設計する。このプログラムの概要は，次のとおりである。<br>
<br>
〔プログラムの概要〕<br>
        <table border="0" cellpadding="3" cellspacing="0">
          <tr>
            <td valign="top">（1）</td>
            <td>各店舗が送ってくる商品の在庫情報の様式を次に示す。ここに格納された年月日の翌営業日が，配送情報を作成する対象となる日（配送対象日と呼ぶ）となる。<br>
        <p><img border="0" src="image/P_05_01.gif"></p>
        <p></td>
          </tr>
          <tr>
            <td valign="top">（2）</td>
            <td>各店舗における各商品の過去の販売量は，販売実績ファイルに格納されている。販売実績ファイルの様式を次に示す。<br>
        <p><img border="0" src="image/P_05_02.gif"></p>
        <p></td>
          </tr>
          <tr>
            <td valign="top">（3）</td>
            <td>販売実績ファイルの過去の販売量を使用して，配送対象日の販売予測量を求める。</td>
          </tr>
          <tr>
            <td valign="top">（4）</td>
            <td>販売予測量の1.2倍を，在庫として必要な量とする。在庫量がこの量に満たない場合には，その差を不足量とする。</td>
          </tr>
          <tr>
            <td valign="top">（5）</td>
            <td>商品は，箱にこん包されている。商品によってこん包する箱の種類が異なり，箱に入る商品の個数も異なる。箱の種類を示す区分（箱区分と呼ぶ）及びその箱に入る商品の個数（こん包数と呼ぶ）は，データベースの商品表に格納されている。商品表の様式を次に示す。下線を付けた項目は主キーである。<br>
        <p><img border="0" src="image/P_05_03.gif"></p>
        <p></td>
          </tr>
          <tr>
            <td valign="top">（6）</td>
            <td>配送する商品の個数が不足量以上になるように箱の個数（配送箱数と呼ぶ）を算出し，店舗別・商品別の配送情報を作成して出力する。配送情報の様式を次に示す。<br>
        <p><img border="0" src="image/P_05_04.gif"></p>
        <p></td>
          </tr>
        </table>
<br>
<hr>
<p><b><a name="51">設問1</a>　</b>プログラムの主処理を四つのモジュールに分割し，プログラム構造図（図1）及びモジュール間のデータの関連を示すデータ流れ図（図2）を作成した。図1及び図2中の［　　　　］に入れる正しい答えを，解答群の中から選べ。<br>
        <p><img border="0" src="image/P_05_11.gif"></p>
        <p><br>
図1　プログラム構造図<br>
        <p><img border="0" src="image/P_05-1-2.gif"></p>
        <p><br>
解答群<br>
ア　こん包数　　　　イ　在庫量　　　　ウ　商品コード　　　エ　商品表<br>
オ　店舗コード　　　カ　配送箱数　　　キ　販売実績ファイル<br>
ク　販売予測量　　　ケ　販売量　　　　コ　不足量<br>
<br>
<A NAME="44">
<HR WIDTH=100%>
</a><a HREF="15F_P_A2.HTM#51">設問1の正解例と解説へ</a>
<HR WIDTH=100%>
  　<BR>
<b><a name="52">設問2</a>　</b>プログラムの運用を開始してしばらくたつと，在庫情報に含まれる商品に対応する販売実績が，販売実績ファイルに見つからないことが多くなった。これは，過去の販売実績のない新規商品が増えたことが原因である。そこで，在庫情報中の商品と，これに類似し過去に販売実績のある商品（類似商品と呼ぶ）を関連付けることにした。このため，次に示す商品対応表を新たに作成し，この表を使って処理を行うようにプログラムを修正する方針を立てた。下線をつけた項目は主キーである。<br>
<br>
<img border="0" src="image/P_05_21.gif"></p>
<br>
商品対応表のデータを入力するモジュールとして正しい答えを，解答群の中から選べ。<BR>
<BR>
解答群<BR>
ア　在庫情報の受信　　　　イ　配送箱数の算出<BR>
ウ　販売予測量の算出　　　エ　不足量の算出<BR>
<BR>
<A NAME="42">
<HR WIDTH=100%>
</a><a HREF="15F_P_A2.HTM#52">設問2の正解例と解説へ</a>
<HR WIDTH=100%>
<p align="center"> 
<a href="15F_P_E3.HTM">■問6へ進む</a>　　　　　　<font size="3"><a HREF="INDEX.HTM">■メニューへ戻る</a></font></p>
<HR WIDTH=100%>
  <br>
</blockquote>
</BODY>
</HTML>
