<html>

<head>
<title>平成16年度春期試験　正解例と解説(午前問41〜問60)</title>
</head>

<body bgcolor="#FFFFFF">

<blockquote>
<hr>
<h3 align="center">平成16年度春期試験　正解例と解説(問41〜問60)</h3>
<hr width="100%">
<a name="41">　<br>
<b>問41</b><br>
</a><br>
<br>
<select name="17FA01" size="1"><option selected>解答例</option><option>ウ</option></select><br>
<br>
＜解説＞プログラムのオーバレイ構造は，同時には実行しないプログラムモジュールについて主記憶上にロードする領域を重複させることにより，プログラムの実行に必要な主記憶領域を少なくする方式です。プログラムをオーバレイ構造した場合，主記憶上のロードする領域が重複しているモジュールは同時にロードして実行ができない。したがってBとC，CとD，GとFは同時にロードして実行できないモジュールであり，B→C，C→D，G→Fの参照は許されない。<br>
<hr width="100%">
<a href="16S_A_E3.HTM#41">問題へ</a>
<hr width="100%">
<a name="42">　<br>
<b>問42</b></a><br>
<br>
<select name="17FA01" size="1"><option selected>解答例</option><option>ア</option></select><br>
<br>
＜解説＞処理が終了していない実行中のプログラムが，別のプロセスから再度呼び出され同時実行できる，共用可能なプログラムをリエントラント（再入可能）といいます。リカーシブは、プログラムの実行中に自分自身を呼び出して実行する再帰的な方式。リユーザブルはあるプロセスで使用したプログラムを、使用後制御が戻れば再ロードなしで繰り返し使用できる再使用可能な方式。リロケータブルはメモリの任意の位置に配置し実行できる再配置可能な方式。<br>
<a name="42"><br>
</a>
<hr width="100%">
<a href="16S_A_E3.HTM#42">問題へ</a>
<hr width="100%">
<a name="43">　<br>
<b>問43</b></a><br>
<br>
<select name="17FA01" size="1"><option selected>解答例</option><option>ア</option></select><br>
<br>
＜解説＞イは先入先出のデータ構造のキュー。ウは後入先出のデータ構造のスタック。エはポインタによりリンクをたどるデータ構造のリスト。<br>
<hr width="100%">
<a href="16S_A_E3.HTM#43">問題へ</a>
<hr width="100%">
<a name="44">　<br>
<b>問44</b></a><br>
<br>
<select name="17FA01" size="1"><option selected>解答例</option><option>ア</option></select><br>
<br>
＜解説＞Aはコンパイラで，その利点の1つは最適化が図れることにあり，最適化はオブジェクトプログラムの実行時点での実行効率を高めるため，プログラムの実行効率の悪い部分を等価的に変換すること。Bはインタプリタで，その利点は対話的な実行環境，デバッグ機能，プログラム作成とテストを並行してできる点にある。<br>
<hr width="100%">
<a href="16S_A_E3.HTM#44">問題へ</a>
<hr width="100%">
<a name="45">　<br>
<b>問45</b></a><br>
<br>
<select name="17FA01" size="1"><option selected>解答例</option><option>エ</option></select><br>
<br>
＜解説＞動的リンキングでは，プログラムの実行時にモジュールを結合して組み込むのに対して，静的リンキンギでは，ロードモジュール作成時にモジュールを結合して組み込む。<br>
<hr width="100%">
<a href="16S_A_E3.HTM#45">問題へ</a>
<hr width="100%">
<a name="46">　<br>
<b>問46</b></a><br>
<br>
<select name="17FA01" size="1"><option selected>解答例</option><option>ア</option></select><br>
<br>
＜解説＞Javaはオブジェクト指向言語の1つで，OSや機種に関係なく動作し，プログラムが短くなるため転送時間が短くインターネットや分散ネットワーク環境向きの言語である。Javaのソースプログラムは、自由にダウンロードできるアプレットと呼ばれる中間言語として、インターネット上のサーバに置かれている。クライアントにダウンロードし、WWWブラウザに実装されているJavaインタプリタなどの実行環境により実行できる。OSや機種によらずWWWブラウザに実装されている実行環境で実行でき、プラットフォームに依存しない。<br>
<a name="46"><br>
</a>
<hr width="100%">
<a href="16S_A_E3.HTM#46">問題へ</a>
<hr width="100%">
<a name="47">　<br>
<b>問47</b></a><br>
<br>
<select name="17FA01" size="1"><option selected>解答例</option><option>イ</option></select><br>
<br>
＜解説＞XML（Extensible Markup Language）は，インターネット環境との親和性が高いハイパテキスト記述言語で，文書構造だけでなく，データ構造をタグを用いて記述できるマークアップ言語。HTMLと異なり，ユーザが独自にタグを定義できる特徴をもつ。<br>
XML文書の基本となる情報単位が要素で，開始タグから終了タグまでの部分を指す。開始タグと終了タグの間にあるテキストをコンテンツと呼ぶ。開始タグから終了タグの間に要素をネストさせることもできる。データを開始タグと終了タグで囲んで構成するが，&lt;tag&gt;&lt;/tag&gt;のようにデータのない空要素もある。またXMLには空要素タグと呼ばれる&lt;nothing/&gt;や&lt;IMG
SRC=&quot;http://www.xml.or.jp/image/???.jpeg&quot;/&gt;のようなタグや，&lt;?xml
version=&quot;1.0&quot;?&gt;のようなXML宣言のタグがあり，開始タグと終了タグが対になっていないタグもある。したがって<br>
&lt;book author=&quot;三輪幸市”&gt;スーパー合格本&lt;/book&gt;<br>
&lt;book author=&quot;三輪幸市”　title=&quot;スーパー合格本&quot;/&gt;<br>
のようないずれの記述もできる。<br>
XMLではデータを木構造で記述する。要素は入れ子にすることができ，要素同士，または要素と属性の間には親子関係がある。木構造にモデル化し，それを要素や属性の階層構造で表現する。<br>
XMLの木構造の頂点にはルート要素と呼ばれる要素を1つだけ定義できる。ルート要素以外の要素は，親要素を1つだけもつことができる。<br>
<hr width="100%">
<a href="16S_A_E3.HTM#47">問題へ</a>
<hr width="100%">
<a name="48">　<br>
<b>問48</b></a><br>
<br>
<select name="17FA01" size="1"><option selected>解答例</option><option>エ</option></select><br>
<br>
＜解説＞UMLはオブジェクト指向分析・設計の統一設計手法で，
ユースケース図，クラス図，オブジェクト図，シーケンス図，コラボレーション図，状態図，アクティビティ図などの図からなる。<br>
ERP（Enterprise Resource Planning）生産，流通，会計業務にいたる企業の経営資源を統合管理するための情報システム。<br>
EAI (Enterprise Application Integration)
は，企業内で部門ごとに散在している業務アプリケーションやシステムを連携・統合し，システム間の有機的なデータ連携や効率的な情報資源の活用を目的とした技術やソフトウェア。<br>
EJB（Enterprise JavaBeans）は，サーバサイドのJavaプログラムをコンポーネント化し，効率的なアプリケーション開発環境を構築するためのコンポーネント（部品）技術の仕様。<br>
<hr width="100%">
<a href="16S_A_E3.HTM#48">問題へ</a>
<hr width="100%">
<a name="49">　<br>
<b>問49</b></a><br>
<br>
<select name="17FA01" size="1"><option selected>解答例</option><option>ウ</option></select><br>
<br>
＜解説＞スパイラルモデルは，独立性の高い部分ごとに，設計，プログラミング，テストの開発工程を反復しながら完成度を高めていく開発手法です。<br>
プロトタイピングは，開発の初期段階で入出力画面などの具体的に動作する試作品（プロトタイプ）を作成し，これをたたき台として検討と修正を繰り返しながら，仕様を確定していく開発手法です。ウォータフォールモデルによる開発では，全体から部分へと段階的に詳細化し，前工程の設計書（ドキュメント）に基づきシステム開発を工程順に進めます。Ｅ-Ｒ図は、分析対象を「実体」と「実体間の関連」という２つの概念で表現し、実体間の関連構造を分析しモデル化をする図（Entity
Relation Model）。<br>
<a name="49"><br>
</a>
<hr width="100%">
<a href="16S_A_E3.HTM#49">問題へ</a>
<hr width="100%">
<a name="50">　<br>
<b>問50</b></a><br>
<br>
<select name="17FA01" size="1"><option selected>解答例</option><option>ア</option></select><br>
<br>
＜解説＞DFD(Data Flow Diagram)は，機能とデータの流れを図で表現したもので，業務分析やシステム分析で業務機能とデータの流れの分析などに用います。処理機能をバブルで表し，データの流れを矢印で表します。<br>
<br>
<hr width="100%">
<a href="16S_A_E3.HTM#50">問題へ</a>
<hr width="100%">
<a name="51">　<br>
<b>問51</b><br>
</a><br>
<br>
<select name="17FA01" size="1"><option selected>解答例</option><option>ウ</option></select><br>
<br>
＜解説＞コードの付番はコードの意味や業務での運用に詳しい業務担当者が行うべきで，アは不適切。<br>
コードの設計は，コンピュータ内部での処理効率よりも，コードにより分類・識別・グループ化が簡単に行えるように，また将来的なデータ件数の増加や細分化，他の分野との共通性などを見据えてコードのけた数や属性を設計すべきであり，イは不適切。コードの保守方法も含めて，コード設計は外部設計の段階で決め手おくべきであり，エは不適切。<br>
<hr width="100%">
<a href="16S_A_E3.HTM#51">問題へ</a>
<hr width="100%">
<a name="52">　<br>
<b>問52</b></a><br>
<br>
<select name="17FA01" size="1"><option selected>解答例</option><option>ウ</option></select><br>
<br>
＜解説＞ホワイトボックステストはモジュールの内部構造に着目して行うテストです。アはボトムアップテスト，イはトップダウンテスト，エはブラックボックステストです。<br>
<a name="52"><br>
</a>
<hr width="100%">
<a href="16S_A_E3.HTM#52">問題へ</a>
<hr width="100%">
<a name="53">　<br>
<b>問53</b></a><br>
<br>
<select name="17FA01" size="1"><option selected>解答例</option><option>ア</option></select><br>
<br>
＜解説＞未消化テスト項目数，未解決バグ数が減らず横這いなので，解決困難なバグに直面しテストが進んでいない状況にあると言えるので，アが適切。未消化テスト項目数が横這いで減らず，消化実績が上がっていないので，イは不適切。バグの摘出数は減っているが，未消化テスト項目数と未解決バグ数は減っていないので，テストは収束しているとは言えず，ウは不適切。バグの摘出数とテスト項目の消化数が一致しているとは言えず，エは不適切。<br>
<a name="53"><br>
</a>
<hr width="100%">
<a href="16S_A_E3.HTM#53">問題へ</a>
<hr width="100%">
<a name="54">　<br>
<b>問54</b></a><br>
<br>
<select name="17FA01" size="1"><option selected>解答例</option><option>エ</option></select><br>
<br>
＜解説＞各結合点の最早開始時刻を求める。最早開始時刻は最も早く作業を開始できる時刻で，開始点から結合点に至る経路が2つ以上ある場合は，最も大きな時刻をとる。最早開始時刻を求めると以下の図のようになり，終了までに必要な最短日数は31日となる。<br>
<img border="0" src="image/AMA54.jpg" width="812" height="296"><br>
<br>
<hr width="100%">
<a href="16S_A_E3.HTM#54">問題へ</a>
<hr width="100%">
<a name="55">　<br>
<b>問55</b></a><br>
<br>
<select name="17FA01" size="1"><option selected>解答例</option><option>ア</option></select><br>
<br>
＜解説＞COCOMO（Constructive Cost Model）は，ソフトウェア開発実績のモデルデータをもとに，自社で開発するソフトウェアのコード行数に，自社の開発要員のスキルなどの生産性の影響要因に関する過去の統計的な補正係数を掛け合わせて開発工数や開発期間に換算する見積手法で，自社の生産性に関する影響要因のデータが必要となり，アは適切。<br>
開発要員の技量が異なる場合は，過去に開発したプログラムの規模は見積に参考にならないが，工数は参考になるので，イは不適切。<br>
ファンクションポイント法は，入出力画面数，帳票数，論理ファイル数などに，機能の複雑さに応じた重みを掛けて，システム機能をポイントにより定量化し，ソフトウェアの開発規模を見積もる手法であり，ステップ数は不要で，エは不適切。<br>
<hr width="100%">
<a href="16S_A_E3.HTM#55">問題へ</a>
<hr width="100%">
<a name="56">　<br>
<b>問56</b></a><br>
<br>
<select name="17FA01" size="1"><option selected>解答例</option><option>ア</option></select><br>
<br>
＜解説＞要求定義，外部設計，内部設計の誤りはコーディングやテストケースの誤りに比べ，その後の全工程に影響するので，修復コストは高い。したがってアは適切だが，イ，ウ，エは不適切。<br>
<br>
<hr width="100%">
<a href="16S_A_E3.HTM#56">問題へ</a>
<hr width="100%">
<a name="57">　<br>
<b>問57</b></a><br>
<br>
<select name="17FA01" size="1"><option selected>解答例</option><option>ア</option></select><br>
<br>
＜解説＞同一記憶媒体にバックアップデータを置くと，媒体障害によりバックアップデータも失われるので，別の媒体にバックアップデータを置くべきであり，イは不適切。バックアップデータからの復旧時間は差分バックアップよりフルバックアップのほうが短く，ウは不適切。バックアップ媒体は格納効率からシーケンシャルアクセスの媒体で行うのがよく，エは不適切。<br>
<br>
<hr width="100%">
<a href="16S_A_E3.HTM#57">問題へ</a>
<hr width="100%">
<a name="58">　<br>
<b>問58</b></a><br>
<br>
<select name="17FA01" size="1"><option selected>解答例</option><option>エ</option></select><br>
<br>
＜解説＞各けたの数値と割当てた係数との積の和を求めると<br>
　　　　　2×4＋1×3＋3×2＋1×1＝8＋3＋6＋1＝18<br>
　　　　この積の和18を11で割った余りは7となるので，検査数字は7。<br>
<a name="58"><br>
</a>
<hr width="100%">
<a href="16S_A_E3.HTM#58">問題へ</a>
<hr width="100%">
<a name="59">　<br>
<b>問59</b></a><br>
<br>
<select name="17FA01" size="1"><option selected>解答例</option><option>イ</option></select><br>
<br>
＜解説＞利用頻度の少ないアイコンの削除やウィンドウを閉じるのは，主記憶領域が解放され主記憶領域の使用率が下がるので，イは適切。<br>
デフラグメンテーションは，ハードディスク領域のフラグメンテーション(断片化)を解消する場合に行い，アプリケーション処理中に異常終了が多発する場合は，アプリケーションの再インストールやスキャンディスクを実行すべきで，アは不適切。<br>
アーカイブ機能によりファイルを圧縮すれば，ハードディスク領域を確保できるが，主記憶領域は確保されないので，ウは不適切。エのような場合，ハードディスク領域のフラグメンテーションを解消するためデフラグメンテーションを実行すべきで，エは不適切。<br>
<a name="59"><br>
</a>
<hr width="100%">
<a href="16S_A_E3.HTM#59">問題へ</a>
<hr width="100%">
<a name="60">　<br>
<b>問60</b></a><br>
<br>
<select name="17FA01" size="1"><option selected>解答例</option><option>イ</option></select><br>
<br>
＜解説＞インテグリティは，保全性，つまり壊れず完全な状態が保たれていること。<br>
したがってデータのインテグリティが保証されるための対策としては，データの改ざんなどを防止するセキュリティ対策と区別するのではなく，媒体障害やシステムダウンによるデータ破壊に対処するための障害対策などのシステムの運用も含めて総合的に検討するべきであり，アは不適切。<br>
ネットワークによるデータ転送に対するデータのインテグリティを保証するには，データの改ざんに対してディジタル署名により改ざんの有無をチェックする必要があり，エは不適切。<br>
データの内容によっては，プログラムによる機械的なチェックだけではチェックの出来ないものもあり，必要に応じて人手によるチェックも必要で，また運用マニュアルにしたがってチェックすべきであり，ウは不適切。<br>
したがってイが適切。<br>
<a name="60"><br>
</a>
<hr width="100%">
<a href="16S_A_E3.HTM#60">問題へ</a>
<hr width="100%">
　<br>
<a href="INDEX.HTM">メニューへ戻る</a><br>
　<br>
<hr width="100%">
<address>
<br>
</address>
</blockquote>

</body>

</html>
