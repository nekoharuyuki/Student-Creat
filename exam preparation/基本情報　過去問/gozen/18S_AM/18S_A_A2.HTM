<html>

<head>
<title>平成18年度春期試験　解答例と解説（午前問21～問40）</title>
</head>

<body>
<blockquote>
<form>

<hr>
<div align="center">
<h3>平成18年度春期試験　解答例と解説（午前問21～問40）</h3>
</div>

<hr>
<p><strong><a name="21">問21</a></strong></p>
<p><select name="18SA21" size="1"><option selected>解答例</option><option>ウ</option></select></p>
<p>〈解説〉</p>
<p>
外部割込みはハードウェア割込みとも呼ばれ，入出力動作の終了時における入出力割込み，ハードウェアの故障や誤動作の場合における機械チェック割込みやタイマー割込みがある。</p>
<p>これに対し内部割込みはプログラム割込みとも呼ばれ，ゼロ割やけたあふれなどによるプログラムの演算例外，ページフォルト，命令コード異常などがある。</p>
<hr>
<a href="18S_A_E2.HTM#21">問題へ</a>



<hr>
<p><strong><a name="22">問22</a></strong></p>
<p><select name="18SA22" size="1"><option selected>解答例</option><option>ア</option></select></p>
<p>〈解説〉</p>
<p>ア　○<br>
イ　×　キャッシュメモリはCPUと主記憶とのアクセス速度の差を埋める<br>
ウ　×　割込みは発生しない<br>
エ　×　半導体メモリはフラッシュメモリやUSBメモリなどの補助記憶装置，ディスクキャッシュなどに使用されており，CPUのメモリアクセスとは直接関係ない。メモリよりもCPUの性能向上が著しく，アクセス速度の差は大きくなっており，その必要性は増えている。</p>
<hr>
<a href="18S_A_E2.HTM#22">問題へ</a>



<hr>
<p><strong><a name="23">問23</a></strong></p>
<p><select name="18SA23" size="1"><option selected>解答例</option><option>エ</option></select></p>
<p>〈解説〉</p>
<p>
ハミング符号方式は，情報ビットのビット列の一部に冗長ビットを付加して埋め込み，情報ビットと付加ビットとの排他的論理和などによる演算規則を設定して，1ビットの誤りを訂正できるようにした検査方式。ハミング符号方式では，1ビットの誤りを訂正でき，また2ビットの誤りが検出できる。</p>
<p>ア　×　1ビットの誤り検出しかできない<br>
イ　×　1ビットの誤り検出しかできない<br>
ウ　×　通信データやファイルのデータを数値化して合計したチェックサムを通信データやファイルに付加し行う誤り検出方式<br>
エ　○</p>
<hr>
<a href="18S_A_E2.HTM#23">問題へ</a>



<hr>
<p><strong><a name="24">問24</a></strong></p>
<p><select name="18SA24" size="1"><option selected>解答例</option><option>エ</option></select></p>
<p>〈解説〉</p>
<p>ファイルを割り当てる単位である1ブロックのサイズは500×8＝4,000バイトである。</p>
<p>　①2,000バイトのファイルに対しても1ブロック必要である<br>
　②9,000バイトのファイルには3ブロック必要である</p>
<p>したがって①～②の合計で4ブロック必要になるので，割り当てに必要なセクタ数は</p>
<p>4ブロック×8セクタ／ブロック＝32セクタ になる。</p>
<hr>
<a href="18S_A_E2.HTM#24">問題へ</a>



<hr>
<p><strong><a name="25">問25</a></strong></p>
<p><select name="18SA25" size="1"><option selected>解答例</option><option>エ</option></select></p>
<p>〈解説〉</p>
<p>ア　×　SCSI<br>
イ　×　IEEE 1394<br>
ウ　×　RS-232C<br>
エ　○</p>
<hr>
<a href="18S_A_E2.HTM#25">問題へ</a>



<hr>
<p><strong><a name="26">問26</a></strong></p>
<p><select name="18SA26" size="1"><option selected>解答例</option><option>イ</option></select></p>
<p>〈解説〉</p>
<p>命令語は主記憶から制御装置のレジスタに取出され，制御装置のデコーダで解読される。</p>
<hr>
<a href="18S_A_E2.HTM#26">問題へ</a>



<hr>
<p><strong><a name="27">問27</a></strong></p>
<p><select name="18SA27" size="1"><option selected>解答例</option><option>ウ</option></select></p>
<p>〈解説〉</p>
<p>
FIFO方式でページ置換えを行うので，ページ枠に参照するページがない場合，先入先出でページを追い出して参照すべきページをページインする。したがって以下のようにページインは5回になる。</p>
<p><img border="0" src="IMAGE/explanation.jpg" width="327" height="263"></p>
<hr>
<a href="18S_A_E2.HTM#27">問題へ</a>



<hr>
<p><strong><a name="28">問28</a></strong></p>
<p><select name="18SA28" size="1"><option selected>解答例</option><option>ウ</option></select></p>
<p>〈解説〉</p>
<p>ア　×　待ち時間の長いタスクほど優先度が高くなるので，CPU割当てを待ち続ける可能性は低い<br>
イ　×　一定時間経過すればCPUの使用権が中断されるので，1つのタスクの実行がCPUを占有することがなく，CPU割当てを待ち続ける可能性は低い<br>
ウ　○　処理時間の短いタスクの実行が優先されるので，処理時間の長いタスクが待ち続ける可能性が高い<br>
エ　×　到着順に待ち行列に入り，先に到着したタスクから先入先出し順に実行されるので，CPU割当てを待ち続けるタスクが発生する可能性は低い</p>
<hr>
<a href="18S_A_E2.HTM#28">問題へ</a>



<hr>
<p><strong><a name="29">問29</a></strong></p>
<p><select name="18SA29" size="1"><option selected>解答例</option><option>ウ</option></select></p>
<p>〈解説〉</p>
<p>以下の図のようにスプールファイルの印刷データは3回目と4回目のジョブ実行時点で最大の1,200 Mバイトに達し，それ以降は印刷完了ごとに400
Mバイトずつ削除される。</p>
<p>
<img border="0" src="IMAGE/06F_am_ex_7.jpg" width="328" height="155"></p>
<hr>
<a href="18S_A_E2.HTM#29">問題へ</a>



<hr>
<p><strong><a name="30">問30</a></strong></p>
<p><select name="18SA30" size="1"><option selected>解答例</option><option>イ</option></select></p>
<p>〈解説〉</p>
<p>API（Application Program
Interface）は，様々なアプリケーションソフトで共通に使われる汎用的な機能をそれぞれ部品プログラムにして集めたもの。これらはOSに用意された機能で，アプリケーションソフトからこれらの機能を呼び出して利用できる。またアプリケーションを開発する場合も，これらのAPIの呼出しを組み合わせて作成する。</p>
<hr>
<a href="18S_A_E2.HTM#30">問題へ</a>



<hr>
<p><strong><a name="31">問31</a></strong></p>
<p><select name="18SA31" size="1"><option selected>解答例</option><option>エ</option></select></p>
<p>〈解説〉</p>
<p>ア　×　遊休時間が増えることにより単位時間内に処理できるトランザクションやジョブの件数は減り，スループットは低下する。<br>
イ　×　スループットは，単位時間当たりにシステムが処理できる処理能力のことで，システムの性能評価の指標。入出力時間やオーバヘッド時間（OS自身の処理に使われる時間）の影響を受ける。<br>
ウ　×　多重プログラミングによりCPUの遊休時間が減り，処理能力が向上するのでスループットは向上する。<br>
エ　○　スプーリングにより主記憶と低速の入出力装置間のデータが円滑化しスループット（単位時間あたりにシステムが処理できる仕事量）が高まり，処理効率が向上する。</p>
<hr>
<a href="18S_A_E2.HTM#31">問題へ</a>



<hr>
<p><strong><a name="32">問32</a></strong></p>
<p><select name="18SA32" size="1"><option selected>解答例</option><option>イ</option></select></p>
<p>〈解説〉</p>
<p>ア，イ，ウ，エの各場合について稼働率を計算すると以下のように，イの場合が最も高い。</p>
<p>ア　1－（1－0.7）（1－0.7）（1－0.7）（1－0.7）＝1－0.3<sup>4</sup>＝1－0.0081＝0.9919<br>
イ　1－（1－0.8）（1－0.8）（1－0.8）＝1－0.2<sup>3</sup>＝1－0.08＝0.992<br>
ウ　1－（1－0.9）（1－0.9）＝1－0.1<sup>2</sup>＝1－0.01＝0.99<br>
エ　単一システムなので稼働率は0.99</p>
<hr>
<a href="18S_A_E2.HTM#32">問題へ</a>



<hr>
<p><strong><a name="33">問33</a></strong></p>
<p><select name="18SA33" size="1"><option selected>解答例</option><option>ア</option></select></p>
<p>〈解説〉</p>
<p>フェールセーフは障害発生時にシステムを停止させることで，システムの安全性を確保する設計。</p>
<p>ア　○<br>
イ　×　保守性を考慮したもの<br>
ウ　×　フェールソフト（機能低下を許しても，システムを停止させずに機能を維持した状態で続行する設計）<br>
エ　×　保守性を考慮したもの</p>
<hr>
<a href="18S_A_E2.HTM#33">問題へ</a>



<hr>
<p><strong><a name="34">問34</a></strong></p>
<p><select name="18SA34" size="1"><option selected>解答例</option><option>ウ</option></select></p>
<p>〈解説〉</p>
<p>ア　×　保守性に関する説明<br>
イ　×　保守性に関する説明<br>
ウ　○　可用性とはいつでも使用できる状態にあること<br>
エ　×　保全性（Integrity：壊れにくさ），安全性（security）に関する説明</p>
<hr>
<a href="18S_A_E2.HTM#34">問題へ</a>



<hr>
<p><strong><a name="35">問35</a></strong></p>
<p><select name="18SA35" size="1"><option selected>解答例</option><option>ア</option></select></p>
<p>〈解説〉</p>
<p>ア　○　電話回線を使った常時接続サービスで，電話回線の300 KHz～1
MHzの帯域をディジタル回線として利用する非対称ディジタル加入者線。スプリッタによりデータ用の高周波信号と音声用の低周波信号に分離し，両者の同時通信を可能としている。<br>
イ　×　周波数帯域が異なっており，スプリッタを用いても通信速度が低下することはない<br>
ウ　×　下りの方が高速で，下りのデータ量が多い通信向き<br>
エ　×　これはISDNに関する説明</p>
<hr>
<a href="18S_A_E2.HTM#35">問題へ</a>



<hr>
<p><strong><a name="36">問36</a></strong></p>
<p><select name="18SA36" size="1"><option selected>解答例</option><option>エ</option></select></p>
<p>〈解説〉</p>
<p>繰返し構造にはdo-while型とwhile型がある。</p>
<p>while型は先に条件判定してから後で処理を行う前判定型でエに該当する。</p>
<p>do-while型は先に処理を行ってから後で条件判定を行う後判定型で，イに該当する。<br>
後判定型のdo-while型では必ず1回は処理を行います。</p>
<p>アとウは分岐構造。</p>
<hr>
<a href="18S_A_E2.HTM#36">問題へ</a>



<hr>
<p><strong><a name="37">問37</a></strong></p>
<p><select name="18SA37" size="1"><option selected>解答例</option><option>ア</option></select></p>
<p>〈解説〉</p>
<p>（＊，B，C，T<sub>1</sub>）はB＊C→T<sub>1</sub>に対応する。<br>
（／，T<sub>1</sub>，D，T<sub>2</sub>）はB＊C／D→T<sub>2</sub>に対応する。<br>
（＋，A，T<sub>2</sub>，T<sub>3</sub>）はA＋B＊C／D→T<sub>3</sub>に対応する。</p>
<p>したがってアが適切。</p>
<hr>
<a href="18S_A_E2.HTM#37">問題へ</a>



<hr>
<p><strong><a name="38">問38</a></strong></p>
<p><select name="18SA38" size="1"><option selected>解答例</option><option>ア</option></select></p>
<p>〈解説〉</p>
<p>E-R図は，分析対象を「エンティティ」と「エンティティ間の関連」という2つの概念で表現し，エンティティ間の関連構造を分析しモデル化をする図（Entity
Relation Model）。</p>
<p>
企業内に実在するもの（顧客，仕入先，商品などの人やもの，受注や仕入れや在庫などの概念）を「エンティティ（実体）」といい，それらの「エンティティ間の関連」をモデル化して図で表現したもの。</p>
<hr>
<a href="18S_A_E2.HTM#38">問題へ</a>



<hr>
<p><strong><a name="39">問39</a></strong></p>
<p><select name="18SA39" size="1"><option selected>解答例</option><option>イ</option></select></p>
<p>〈解説〉</p>
<p>ア　×　関連…共有集約（aggregation），強い集約合成集約（composition）以外の何らかの関連<br>
イ　○　集約…全体と部分の関係で，クラスAはクラスBの部分である<br>
ウ　×　依存…クラスBの変更がクラスDに影響する<br>
エ　×　汎化…クラスCはクラスDを継承し，クラスDはクラスCのスーパークラス</p>
<hr>
<a href="18S_A_E2.HTM#39">問題へ</a>



<hr>
<p><strong><a name="40">問40</a></strong></p>
<p><select name="18SA40" size="1"><option selected>解答例</option><option>イ</option></select></p>
<p>〈解説〉</p>
<p>ア　×　基底クラスの変更は可能で，保護されない<br>
イ　○　基底クラスを継承してサブクラスを作ることにより，基底クラスとは異なる部分のみの記述で済むことになるので，再利用によりソフトウェア開発の生産効率があがる<br>
ウ　×　基底クラスの変更はサブクラスに継承され，影響を与える<br>
エ　×　サブクラスの再利用もできる</p>
<hr>
<a href="18S_A_E2.HTM#40">問題へ</a>
<hr>
<p><a href="INDEX.HTM">メニューへ戻る</a></p>
<hr>

</blockquote>
</form>
</body>
</html>